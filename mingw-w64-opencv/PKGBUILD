pkgname=mingw-w64-opencv
pkgver=3.1.0
pkgrel=1
pkgdesc="Open Source Computer Vision Library (mingw-w64)"
arch=('any')
license=('BSD')
url="http://opencv.org/"
options=('!buildflags' 'staticlibs' '!strip')
depends=('mingw-w64-crt' 'mingw-w64-jasper' 'mingw-w64-zlib')
makedepends=('mingw-w64-cmake')
source=("${pkgname%-git}::git+http://github.com/Itseez/opencv.git")
md5sums=('SKIP')

_architectures="i686-w64-mingw32 x86_64-w64-mingw32"

_cmakeopts=(
  '-DCMAKE_SKIP_RPATH=ON'
  '-DCMAKE_BUILD_TYPE=Release'
  '-DWITH_PTHREADS_PF=OFF'
  '-DWITH_TBB=OFF'
  '-DWITH_WIN32UI=OFF'
  '-DWITH_VFW=OFF'
  '-DWITH_EIGEN=OFF'
  '-DWITH_OPENMP=OFF'
  '-DWITH_CSTRIPES=OFF'
  '-DWITH_IPP=OFF'
  '-DWITH_TIFF=OFF'
  '-DWITH_JPEG=OFF'
  '-DWITH_WEBP=OFF'
  '-DWITH_JASPER=OFF'
  '-DWITH_PNG=OFF'
  '-DWITH_XINE=OFF'
  '-DWITH_GSTREAMER=OFF'
  '-DBUILD_WITH_DEBUG_INFO=OFF'
  '-DWITH_OPENEXR=OFF'
  '-DBUILD_opencv_apps:BOOL=OFF'
  '-DWITH_FFMPEG:BOOL=OFF'
  '-DBUILD_DOCS:BOOL=OFF'
  '-DBUILD_EXAMPLES:BOOL=OFF'
  '-DBUILD_PACKAGE:BOOL=OFF'
  '-DBUILD_SHARED_LIBS:BOOL=ON'
  '-DBUILD_TESTS:BOOL=OFF'
  '-DBUILD_PERF_TESTS:BOOL=OFF'
  '-DWITH_OPENCL:BOOL=OFF'
  '-DWITH_GTK:BOOL=OFF'
  '-DBUILD_opencv_videostab=OFF'
  '-DBUILD_opencv_videoio=OFF'
  '-DBUILD_opencv_video=OFF' 
  '-DBUILD_opencv_superres=OFF'
  '-DBUILD_opencv_stitching=OFF'
  '-DBUILD_opencv_shape=OFF'
  '-DBUILD_opencv_photo=OFF'
  '-DBUILD_opencv_objdetect=OFF'
  '-DBUILD_opencv_ts=OFF'
  '-DBUILD_opencv_ml=OFF'
  '-DBUILD_opencv_imgproc=OFF'
  '-DBUILD_opencv_imgcodecs=OFF'
  '-DBUILD_opencv_highgui=OFF'
  '-DBUILD_opencv_flann=OFF'
  '-DBUILD_opencv_features2d=OFF'
  '-DBUILD_opencv_core=ON'
  '-DBUILD_opencv_viz=OFF'
  '-DBUILD_opencv_calib3d=OFF'   
  '-DBUILD_opencv_python2=OFF'
  '-DBUILD_opencv_python3=OFF'
  '-DINSTALL_C_EXAMPLES=OFF'
  '-DINSTALL_PYTHON_EXAMPLES=OFF'
  '-DBUILD_ZLIB=OFF'
  '-DBUILD_TIFF=OFF'
  '-DBUILD_JASPER=OFF'
  '-DBUILD_JPEG=OFF'
  '-DBUILD_PNG=OFF'
  '-DBUILD_OPENEXR=OFF'
  '-DWITH_VTK=OFF'
  '-DWITH_IPP=OFF'
  '-DWITH_DSHOW=OFF'
)

build() {
  cd "$pkgname"
  git checkout dd379ec
  cd ..

  for _arch in ${_architectures}; do
    mkdir -p build-${_arch}
    cd build-${_arch}

    ${_arch}-cmake -DCMAKE_INSTALL_PREFIX=/usr/${_arch} ${_cmakeopts[@]} "../$pkgname"
    make

    cd ..
  done
}

package() {
  for _arch in ${_architectures}; do
    cd build-${_arch}

    make DESTDIR="$pkgdir" install
    rm -r  "$pkgdir"/usr/${_arch}/share/
    install -d "$pkgdir"/usr/${_arch}/lib/pkgconfig

    install -m644 ./unix-install/opencv.pc "$pkgdir"/usr/${_arch}/lib/pkgconfig/

    # They kinda forgot to write install rules for these _really sodding important_ things...
    mkdir -p "$pkgdir"/usr/${_arch}/share/opencv/
    install -m644 ./win-install/OpenCVConfig.cmake "$pkgdir"/usr/${_arch}/share/opencv/
    install -m644 ./win-install/OpenCVConfig-version.cmake "$pkgdir"/usr/${_arch}/share/opencv/

    # Hilarious hack to work around opencv build system brokenness...
    sed -ie "s|$srcdir/build-${_arch}|/usr/${_arch}|g" ./OpenCVModules.cmake
    install -m644 ./OpenCVModules.cmake "$pkgdir"/usr/${_arch}/share/opencv/

    rm "$pkgdir"/usr/${_arch}/LICENSE
    ${_arch}-strip --strip-unneeded "$pkgdir"/usr/${_arch}/bin/*.dll
    ${_arch}-strip -g "$pkgdir"/usr/${_arch}/lib/*.a

    cd ..
  done
}

